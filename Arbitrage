import numpy as np
import pandas as pd
import requests
from tvDatafeed import TvDatafeed, Interval

username = 'Niteshjai'
password = 'Niteshjaiswal1234'

tv = TvDatafeed(username, password)

class arbitrage():
    def __init__(self, api_key, stocks):
        self.initial_cash = 100000
        self.cash = self.initial_cash
        self.shares_held = 0
        self.api_key = api_key
        self.stocks = stocks
        self.ratio = 1 / 20             # CEDEAR ratio
        self.rate = self.get_usd_to_ars_rate_fastforex()
    
    def get_usd_to_ars_rate_fastforex(self):
        url = f'https://api.fastforex.io/fetch-one?from=USD&to=ARS&api_key={self.api_key}'
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200 and 'result' in data:
            return data['result']['ARS']
        else:
            raise Exception(f"API error or no data: {data}")
    
    def get_data(self):
        # NASDAQ listing
        data_us = tv.get_hist(
            symbol='AAPL',
            exchange='NASDAQ',
            interval=Interval.in_daily,
            n_bars=1000
        )['close']
        # CEDEAR listing on BCBA
        data_ar = tv.get_hist(
            symbol='AAPLB',       # correct CEDEAR ticker
            exchange='BCBA',       # BCBA = Buenos Aires
            interval=Interval.in_daily,
            n_bars=1000
        )['close']
        
        df = pd.DataFrame({
            'NASDAQ': data_us,
            'BYMA':   data_ar
        }).dropna()
        
        df['fair_cedear']= df['NASDAQ'] * self.rate * self.ratio
        df['arbitrage']= df['BYMA'] - df['fair_cedear']
        df['profit']= 0.0
        return df

    def buy(self, exchange, shares, price):
        cost = shares * price
        if self.cash >= cost:
            self.cash-= cost
            self.shares_held += shares

    def sell(self, exchange, shares, price):
        if self.shares_held >= shares:
            proceeds = shares * price
            self.cash+= proceeds
            self.shares_held -= shares

    def profit(self):
        df = self.get_data()
        for i, row in df.iterrows():
            arb = row['arbitrage']
            if arb > 0:
                # Buy USD @ NASDAQ, sell ARS @ BYMA
                self.buy('NASDAQ', self.stocks, row['NASDAQ'])
                self.sell('BYMA',   self.stocks, row['BYMA'])
                df.at[i, 'profit'] = arb * self.stocks
            elif arb < 0:
                # Buy ARS @ BYMA, sell USD @ NASDAQ
                self.buy('BYMA', self.stocks, row['BYMA'])
                self.sell('NASDAQ', self.stocks, row['NASDAQ'])
                df.at[i, 'profit'] = abs(arb * self.stocks)
            # if arb == 0, do nothing

        total_profit = df['profit'].sum()
        return total_profit, self.cash, self.shares_held

# Usage
api_key = '55614ff050-9418ead798-swtxrx'
stocks  = 100
arb_strat = arbitrage(api_key, stocks)
profit, final_cash, shares_held = arb_strat.profit()

print('Total_profit is', profit)
print('Final_cash is', final_cash)
print('Total_sharesheld is', shares_held)
